// Code generated by github.com/skipor/gmg - type-safe, fast and handy alternative GoMock generator. DO NOT EDIT.
// Source: repo/pkg.Test2

package mocks_pkg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NewMockTest2 creates a new GoMock for repo/pkg.Test2.
func NewMockTest2(ctrl *gomock.Controller) *MockTest2 {
	return &MockTest2{ctrl: ctrl}
}

// MockTest2 is a GoMock of repo/pkg.Test2.
type MockTest2 struct{ ctrl *gomock.Controller }

// EXPECT returns GoMock recorder.
func (m_ *MockTest2) EXPECT() *MockTest2MockRecorder {
	return (*MockTest2MockRecorder)(m_)
}

// T2 implements mocked interface.
func (m_ *MockTest2) T2() {
	m_.ctrl.T.Helper()
	m_.ctrl.Call(m_, "T2")
	return
}

// MockTest2MockRecorder is the mock recorder for MockTest2.
type MockTest2MockRecorder MockTest2

//   T2()
func (r_ *MockTest2MockRecorder) T2() MockTest2T2Call {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "T2", reflect.TypeOf((*MockTest2)(nil).T2))
	return MockTest2T2Call{call}
}

// MockTest2T2Call is type safe wrapper of *gomock.Call.
type MockTest2T2Call struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockTest2T2Call) DoAndReturn(f func()) MockTest2T2Call {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockTest2T2Call) Do(f func()) MockTest2T2Call {
	c_.Call.Do(f)
	return c_
}

func (r_ *MockTest2MockRecorder) mock() *MockTest2 {
	return (*MockTest2)(r_)
}
