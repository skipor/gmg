// Code generated by github.com/skipor/gmg - type-safe, fast and handy alternative GoMock generator. DO NOT EDIT.
// Source: repo/pkg.Test1

package mocks_pkg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NewMockTest1 creates a new GoMock for repo/pkg.Test1.
func NewMockTest1(ctrl *gomock.Controller) *MockTest1 {
	return &MockTest1{ctrl: ctrl}
}

// MockTest1 is a GoMock of repo/pkg.Test1.
type MockTest1 struct{ ctrl *gomock.Controller }

// EXPECT returns GoMock recorder.
func (m_ *MockTest1) EXPECT() *MockTest1MockRecorder {
	return (*MockTest1MockRecorder)(m_)
}

// T1 implements mocked interface.
func (m_ *MockTest1) T1() {
	m_.ctrl.T.Helper()
	m_.ctrl.Call(m_, "T1")
	return
}

// MockTest1MockRecorder is the mock recorder for MockTest1.
type MockTest1MockRecorder MockTest1

//   T1()
func (r_ *MockTest1MockRecorder) T1() MockTest1T1Call {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "T1", reflect.TypeOf((*MockTest1)(nil).T1))
	return MockTest1T1Call{call}
}

// MockTest1T1Call is type safe wrapper of *gomock.Call.
type MockTest1T1Call struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockTest1T1Call) DoAndReturn(f func()) MockTest1T1Call {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockTest1T1Call) Do(f func()) MockTest1T1Call {
	c_.Call.Do(f)
	return c_
}

func (r_ *MockTest1MockRecorder) mock() *MockTest1 {
	return (*MockTest1)(r_)
}
