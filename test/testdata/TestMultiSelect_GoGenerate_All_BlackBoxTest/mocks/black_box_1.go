// Code generated by github.com/skipor/gmg - type-safe, fast and handy alternative GoMock generator. DO NOT EDIT.
// Source: repo/pkg_test.BlackBox1

package mocks_pkg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NewMockBlackBox1 creates a new GoMock for repo/pkg_test.BlackBox1.
func NewMockBlackBox1(ctrl *gomock.Controller) *MockBlackBox1 {
	return &MockBlackBox1{ctrl: ctrl}
}

// MockBlackBox1 is a GoMock of repo/pkg_test.BlackBox1.
type MockBlackBox1 struct{ ctrl *gomock.Controller }

// EXPECT returns GoMock recorder.
func (m_ *MockBlackBox1) EXPECT() *MockBlackBox1MockRecorder {
	return (*MockBlackBox1MockRecorder)(m_)
}

// BB1 implements mocked interface.
func (m_ *MockBlackBox1) BB1() {
	m_.ctrl.T.Helper()
	m_.ctrl.Call(m_, "BB1")
	return
}

// MockBlackBox1MockRecorder is the mock recorder for MockBlackBox1.
type MockBlackBox1MockRecorder MockBlackBox1

//   BB1()
func (r_ *MockBlackBox1MockRecorder) BB1() MockBlackBox1BB1Call {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "BB1", reflect.TypeOf((*MockBlackBox1)(nil).BB1))
	return MockBlackBox1BB1Call{call}
}

// MockBlackBox1BB1Call is type safe wrapper of *gomock.Call.
type MockBlackBox1BB1Call struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockBlackBox1BB1Call) DoAndReturn(f func()) MockBlackBox1BB1Call {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockBlackBox1BB1Call) Do(f func()) MockBlackBox1BB1Call {
	c_.Call.Do(f)
	return c_
}

func (r_ *MockBlackBox1MockRecorder) mock() *MockBlackBox1 {
	return (*MockBlackBox1)(r_)
}
