// Code generated by github.com/skipor/gmg - type-safe, fast and handy alternative GoMock generator. DO NOT EDIT.
// Source: repo/pkg.Primary1

package mocks_pkg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NewMockPrimary1 creates a new GoMock for repo/pkg.Primary1.
func NewMockPrimary1(ctrl *gomock.Controller) *MockPrimary1 {
	return &MockPrimary1{ctrl: ctrl}
}

// MockPrimary1 is a GoMock of repo/pkg.Primary1.
type MockPrimary1 struct{ ctrl *gomock.Controller }

// EXPECT returns GoMock recorder.
func (m_ *MockPrimary1) EXPECT() *MockPrimary1MockRecorder {
	return (*MockPrimary1MockRecorder)(m_)
}

// P1 implements mocked interface.
func (m_ *MockPrimary1) P1() {
	m_.ctrl.T.Helper()
	m_.ctrl.Call(m_, "P1")
	return
}

// MockPrimary1MockRecorder is the mock recorder for MockPrimary1.
type MockPrimary1MockRecorder MockPrimary1

//   P1()
func (r_ *MockPrimary1MockRecorder) P1() MockPrimary1P1Call {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "P1", reflect.TypeOf((*MockPrimary1)(nil).P1))
	return MockPrimary1P1Call{call}
}

// MockPrimary1P1Call is type safe wrapper of *gomock.Call.
type MockPrimary1P1Call struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockPrimary1P1Call) DoAndReturn(f func()) MockPrimary1P1Call {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockPrimary1P1Call) Do(f func()) MockPrimary1P1Call {
	c_.Call.Do(f)
	return c_
}

func (r_ *MockPrimary1MockRecorder) mock() *MockPrimary1 {
	return (*MockPrimary1)(r_)
}
