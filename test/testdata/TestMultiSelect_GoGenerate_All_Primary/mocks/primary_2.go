// Code generated by github.com/skipor/gmg - type-safe, fast and handy alternative GoMock generator. DO NOT EDIT.
// Source: repo/pkg.Primary2

package mocks_pkg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NewMockPrimary2 creates a new GoMock for repo/pkg.Primary2.
func NewMockPrimary2(ctrl *gomock.Controller) *MockPrimary2 {
	return &MockPrimary2{ctrl: ctrl}
}

// MockPrimary2 is a GoMock of repo/pkg.Primary2.
type MockPrimary2 struct{ ctrl *gomock.Controller }

// EXPECT returns GoMock recorder.
func (m_ *MockPrimary2) EXPECT() *MockPrimary2MockRecorder {
	return (*MockPrimary2MockRecorder)(m_)
}

// P2 implements mocked interface.
func (m_ *MockPrimary2) P2() {
	m_.ctrl.T.Helper()
	m_.ctrl.Call(m_, "P2")
	return
}

// MockPrimary2MockRecorder is the mock recorder for MockPrimary2.
type MockPrimary2MockRecorder MockPrimary2

// P2()
func (r_ *MockPrimary2MockRecorder) P2() MockPrimary2P2Call {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "P2", reflect.TypeOf((*MockPrimary2)(nil).P2))
	return MockPrimary2P2Call{call}
}

// MockPrimary2P2Call is type safe wrapper of *gomock.Call.
type MockPrimary2P2Call struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockPrimary2P2Call) DoAndReturn(f func()) MockPrimary2P2Call {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockPrimary2P2Call) Do(f func()) MockPrimary2P2Call {
	c_.Call.Do(f)
	return c_
}

func (r_ *MockPrimary2MockRecorder) mock() *MockPrimary2 {
	return (*MockPrimary2)(r_)
}
