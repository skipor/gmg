// Code generated by github.com/skipor/gmg - type-safe, fast and handy alternative GoMock generator. DO NOT EDIT.
// Source: github.com/skipor/gmg/examples/2_target_interface_select/sub.Baz

package mocks_sub

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NewMockBaz creates a new GoMock for github.com/skipor/gmg/examples/2_target_interface_select/sub.Baz.
func NewMockBaz(ctrl *gomock.Controller) *MockBaz {
	return &MockBaz{ctrl: ctrl}
}

// MockBaz is a GoMock of github.com/skipor/gmg/examples/2_target_interface_select/sub.Baz.
type MockBaz struct{ ctrl *gomock.Controller }

// EXPECT returns GoMock recorder.
func (m_ *MockBaz) EXPECT() *MockBazMockRecorder {
	return (*MockBazMockRecorder)(m_)
}

// Qux implements mocked interface.
func (m_ *MockBaz) Qux() string {
	m_.ctrl.T.Helper()
	res_ := m_.ctrl.Call(m_, "Qux")
	res0, _ := res_[0].(string)
	return res0
}

// MockBazMockRecorder is the mock recorder for MockBaz.
type MockBazMockRecorder MockBaz

//   Qux() string
func (r_ *MockBazMockRecorder) Qux() MockBazQuxCall {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "Qux", reflect.TypeOf((*MockBaz)(nil).Qux))
	return MockBazQuxCall{call}
}

// MockBazQuxCall is type safe wrapper of *gomock.Call.
type MockBazQuxCall struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockBazQuxCall) DoAndReturn(f func() string) MockBazQuxCall {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockBazQuxCall) Do(f func()) MockBazQuxCall {
	c_.Call.Do(f)
	return c_
}

// Return is type safe wrapper of *gomock.Call Return.
func (c_ MockBazQuxCall) Return(res0 string) MockBazQuxCall {
	c_.Call.Return(res0)
	return c_
}

func (r_ *MockBazMockRecorder) mock() *MockBaz {
	return (*MockBaz)(r_)
}
