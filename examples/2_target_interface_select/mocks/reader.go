// Code generated by github.com/skipor/gmg - type-safe, fast and handy alternative GoMock generator. DO NOT EDIT.
// Source: io.Reader

package example_mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NewMockReader creates a new GoMock for io.Reader.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	return &MockReader{ctrl: ctrl}
}

// MockReader is a GoMock of io.Reader.
type MockReader struct{ ctrl *gomock.Controller }

// EXPECT returns GoMock recorder.
func (m_ *MockReader) EXPECT() *MockReaderMockRecorder {
	return (*MockReaderMockRecorder)(m_)
}

// Read implements mocked interface.
func (m_ *MockReader) Read(p []byte) (n int, err error) {
	m_.ctrl.T.Helper()
	res_ := m_.ctrl.Call(m_, "Read", p)
	n, _ = res_[0].(int)
	err, _ = res_[1].(error)
	return n, err
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder MockReader

//   Read(p []byte) (n int, err error)
func (r_ *MockReaderMockRecorder) Read(p interface{}) MockReaderReadCall {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "Read", reflect.TypeOf((*MockReader)(nil).Read), p)
	return MockReaderReadCall{call}
}

// MockReaderReadCall is type safe wrapper of *gomock.Call.
type MockReaderReadCall struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockReaderReadCall) DoAndReturn(f func(p []byte) (n int, err error)) MockReaderReadCall {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockReaderReadCall) Do(f func(p []byte)) MockReaderReadCall {
	c_.Call.Do(f)
	return c_
}

// Return is type safe wrapper of *gomock.Call Return.
func (c_ MockReaderReadCall) Return(n int, err error) MockReaderReadCall {
	c_.Call.Return(n, err)
	return c_
}

func (r_ *MockReaderMockRecorder) mock() *MockReader {
	return (*MockReader)(r_)
}
