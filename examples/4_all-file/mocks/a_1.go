// Code generated by github.com/skipor/gmg - type-safe, fast and handy alternative GoMock generator. DO NOT EDIT.
// Source: github.com/skipor/gmg/examples/4_all-file.A1

package mocks_example

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NewMockA1 creates a new GoMock for github.com/skipor/gmg/examples/4_all-file.A1.
func NewMockA1(ctrl *gomock.Controller) *MockA1 {
	return &MockA1{ctrl: ctrl}
}

// MockA1 is a GoMock of github.com/skipor/gmg/examples/4_all-file.A1.
type MockA1 struct{ ctrl *gomock.Controller }

// EXPECT returns GoMock recorder.
func (m_ *MockA1) EXPECT() *MockA1MockRecorder {
	return (*MockA1MockRecorder)(m_)
}

// A1 implements mocked interface.
func (m_ *MockA1) A1() {
	m_.ctrl.T.Helper()
	m_.ctrl.Call(m_, "A1")
	return
}

// MockA1MockRecorder is the mock recorder for MockA1.
type MockA1MockRecorder MockA1

//   A1()
func (r_ *MockA1MockRecorder) A1() MockA1A1Call {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "A1", reflect.TypeOf((*MockA1)(nil).A1))
	return MockA1A1Call{call}
}

// MockA1A1Call is type safe wrapper of *gomock.Call.
type MockA1A1Call struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockA1A1Call) DoAndReturn(f func()) MockA1A1Call {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockA1A1Call) Do(f func()) MockA1A1Call {
	c_.Call.Do(f)
	return c_
}

func (r_ *MockA1MockRecorder) mock() *MockA1 {
	return (*MockA1)(r_)
}
